
// ************************************************
// CREEGEOMETRIE
// Fonction qui crée les différentes pièces à l'initialisation
// ************************************************

function creeMachine()
{
	// Chargement du BATI (materiau puis géométrie) ***************
	var materialLoader = new THREEJS.MTLLoader();
	materialLoader.load("./sources/models/BATI.mtl", function(materials)
		{
		    	materials.preload();
			var objLoader = new THREEJS.OBJLoader();
			objLoader.setMaterials(materials); // Affecte (d'avance) le matériau
			objLoader.load('./sources/models/BATI.obj', function ( object ) {
						BATI = object;
						//BATI.scale.set(0.04/3,0.04/3,0.04/3);
				 		ENVIRONNEMENT.add( object );
				 		NB_PIECES_CHARGEES += 1
					},
					function (progression){},
					function (error){console.log(error);});
		});
	
	// Chargement du AXE1 (materiau puis géométrie) ***************
	materialLoader.load("./sources/models/AXE1.mtl", function(materials)
		{
		    	materials.preload();
			var objLoader = new THREEJS.OBJLoader();
			objLoader.setMaterials(materials); // Affecte (d'avance) le matériau
			objLoader.load('./sources/models/AXE1.obj', function ( object ) {
						AXE1 = object;
						//AXE1.scale.set(0.04/3,0.04/3,0.04/3);
				 		ENVIRONNEMENT.add( object );
				 		NB_PIECES_CHARGEES += 1
					},
					function (progression){},
					function (error){console.log(error);});
		});
	
	// Chargement du AXE2 (materiau puis géométrie) ***************
	materialLoader.load("./sources/models/AXE2.mtl", function(materials)
		{
		    	materials.preload();
			var objLoader = new THREEJS.OBJLoader();
			objLoader.setMaterials(materials); // Affecte (d'avance) le matériau
			objLoader.load('./sources/models/AXE2.obj', function ( object ) {
						AXE2 = object;
						//AXE2.scale.set(0.04/3,0.04/3,0.04/3);
				 		ENVIRONNEMENT.add( object );
				 		NB_PIECES_CHARGEES += 1
					},
					function (progression){},
					function (error){console.log(error);});
		});
	
	// Chargement du AXE3 (materiau puis géométrie) ***************
	materialLoader.load("./sources/models/AXE2.mtl", function(materials)
		{
		    	materials.preload();
			var objLoader = new THREEJS.OBJLoader();
			objLoader.setMaterials(materials); // Affecte (d'avance) le matériau
			objLoader.load('./sources/models/AXE3.obj', function ( object ) {
						AXE3 = object;
						//AXE3.scale.set(0.04/3,0.04/3,0.04/3);
				 		ENVIRONNEMENT.add( object );
				 		NB_PIECES_CHARGEES += 1
				 		
				 		
						// Bille
						var geom = new THREE.DodecahedronGeometry(RAYON_PALPEUR,1);
				 		BILLE =  new THREE.Mesh( geom, materiau_rouge );
						object.add(BILLE)
						
						
						// Repere palpeur
						REPERE_PALPEUR = new THREE.Group();
						object.add(REPERE_PALPEUR);
						var material_axesX_palpeur = new THREE.LineBasicMaterial({color: 0xFF0000})
						var material_axesY_palpeur = new THREE.LineBasicMaterial({color: 0x00FF00})
						var material_axesZ_palpeur = new THREE.LineBasicMaterial({color: 0x0000FF})
						
						const geometryX = new THREE.BufferGeometry().setFromPoints( [new THREE.Vector3(-1,0,0),new THREE.Vector3(1,0,0)] );
						const geometryY = new THREE.BufferGeometry().setFromPoints( [new THREE.Vector3(0,0,-1),new THREE.Vector3(0,0,1)] );
						const geometryZ = new THREE.BufferGeometry().setFromPoints( [new THREE.Vector3(0,-1,0),new THREE.Vector3(0,1,0)] );
						
						var axeX = new THREE.Line( geometryX, material_axesX_palpeur );
						var axeY = new THREE.Line( geometryY, material_axesY_palpeur );
						var axeZ = new THREE.Line( geometryZ, material_axesZ_palpeur );
						REPERE_PALPEUR.add(axeX);
						REPERE_PALPEUR.add(axeY);
						REPERE_PALPEUR.add(axeZ);
					},
					function (progression){},
					function (error){console.log(error);});
		});
		
	
	

 

}


function creePiece_OLD_A_SUPPRIMER()
{
	
	// Chargement de la PIECE (materiau puis géométrie) ***************
	var materialLoader = new THREEJS.MTLLoader();
	materialLoader.load("./sources/models/T_Parallelisme.mtl", function(materials)
		{
		    	materials.preload();
			var objLoader = new THREEJS.OBJLoader();
			objLoader.setMaterials(materials); // Affecte (d'avance) le matériau
			objLoader.load('./sources/models/T_Parallelisme.obj', function ( object ) {
						PIECE = object;
						//On déplace la géométrie de la piece (les vertices, et pas la piece elle meme)
						var echelle = 0.1
						PIECE.children[0].geometry.scale(echelle,echelle,echelle)
						PIECE.children[0].geometry.translate(0.4,0,-0.4)
						//CONTROLS.target = PIECE.position  // Camera vise la piece
				 		ENVIRONNEMENT.add( object );
				 		NB_PIECES_CHARGEES += 1
					},
					function (progression){},
					function (error){console.log(error);});
		});
}
	
	
	
	
	// DECORS
function creeDecors()
{
	var geometry = new THREE.BoxGeometry( 3, 10, 3 );
	var material = new THREE.MeshLambertMaterial({color : 0x0000AA});//   MeshBasicMaterial( {color: 0x00ff00} );
	var cube = new THREE.Mesh( geometry, material );
	cube.position.set(0.3,-5,-0.5);
	cube.position.sub(ENVIRONNEMENT.position) // Recentre par rapport à l'origine principale
	DECORS.add(cube);
	
	
	
	geometry = new THREE.BoxGeometry( 10, 20, 10 );
	material = new THREE.MeshLambertMaterial({color : 0xFFFFFF});//   MeshBasicMaterial( {color: 0x00ff00} );
	material.side = THREE.BackSide;
	cube = new THREE.Mesh( geometry, material );
	cube.position.sub(ENVIRONNEMENT.position) // Recentre par rapport à l'origine principale
	DECORS.add(cube);

}
	


// **********************************************
// DEPLACEPALPEUR
// Fonction qui déplace le palpeur, éventuellement bridé
// vers la position enregistrée dans POSITION_CIBLE
// ************************************************


function deplacePalpeur(bride=true)
{	
	var position = new THREE.Vector3( AXE2.position.x, AXE3.position.y, AXE1.position.z)
	var dep = POSITION_CIBLE.clone().sub(position).multiplyScalar(0.5)
	
	/*dx = dep.x*0.5
	dy = dep.y*0.5
	dz = dep.z*0.5*/
	
	var n = dep.clone().normalize() // Vecteur directeur
	var decallage_boule_palpeur = n.clone().multiplyScalar(RAYON_PALPEUR) // Rayon de la boule du palper, dans le sens de n
	
	if(dep.length() > PAS_MAX)
	{
		dep = n.clone().multiplyScalar(PAS_MAX)
	}
	
	var newPosition = position.clone().add(dep) // Point d'arriver du centre du palper
	
	
		
	collision = detectCollision(position,newPosition.clone().add(decallage_boule_palpeur)) // Détecte une collision entre le centre actuel de la sphère et le point de contact tangent de la shère après déplacement
	if(collision)
		{
		// On repositionne le palper un peu en arriere (l'équivalent d'un rayon de sphere)
		POSITION_CIBLE = collision.clone().sub(decallage_boule_palpeur); // On revient d'un rayon en arrière
		
		// Mise à jour des coordonnées (du centre de la sphere) sur l'écran
		updateAffichageCoordonnees();
		
		// Mise à jour de la position de la machine
		AXE1.position.z = POSITION_CIBLE.z

		AXE2.position.z = POSITION_CIBLE.z
		AXE2.position.x = POSITION_CIBLE.x

		AXE3.position.z = POSITION_CIBLE.z
		AXE3.position.x = POSITION_CIBLE.x
		AXE3.position.y = POSITION_CIBLE.y
		if(NUAGE_COURANT && !NUAGE_COURANT.doublonMarker(collision))
			{
			NUAGE_COURANT.ajouteMesure(collision)
			if(AUTORISE_BEEP)
				BEEP.play();
			}
		}
	else 
		{
		// Mise à jour de la position de la machine
		AXE1.position.z = newPosition.z

		AXE2.position.z = newPosition.z
		AXE2.position.x = newPosition.x

		AXE3.position.z = newPosition.z
		AXE3.position.x = newPosition.x
		AXE3.position.y = newPosition.y
		}
}




// ***********************************
// Fonction qui vérifie si tout est chargé
function checkChargement()
{
	if(NB_PIECES_CHARGEES>=5)
		CHARGEMENT_TERMINE = true;
}




// **************************************
// Fonction qui détecte une collision sur un segment P1 P2
// P1 et P2 sont les vecteurs position des extrêmités d'un segment
// Renvoie la coordonnée de la colision. null sinon
function detectCollision(P1,P2)
{
	// Code issu de https://stackoverflow.com/questions/68473147/three-js-where-does-line-intersect-mesh
	// On définit un vecteur directeur de la droite (P1P2)
	var dir = new THREE.Vector3();
	dir.subVectors( P2, P1 ).normalize();
	dir.normalize();
	// On en fait un "rayon" (une droite)
	var ray = new THREE.Ray(P1, dir);

	
	// Boucle sur les polygones...
	vertices = PIECE.children[0].geometry.getAttribute("position").array; // Tableaux des vertices
	liste_intersections = [];
	for (var i = 0; i < vertices.length; i+=9) { // Pour chaque face triangulaire (elles le sont toutes, je crois)
	    var a = new THREE.Vector3(vertices[i], vertices[i+1], vertices[i+2]);
	    var b = new THREE.Vector3(vertices[i+3], vertices[i+4], vertices[i+5]);
	    var c = new THREE.Vector3(vertices[i+6], vertices[i+7], vertices[i+8]);
	    var intersection = new THREE.Vector3();
	    // On calcule l'intersection
	    ray.intersectTriangle(a, b, c, false, intersection);
	    // Si on en a trouvé, on les liste
	    if(intersection.length())
		    liste_intersections.push(intersection)
	 }
	 
	 // Pour chaque intersection trouvée
	 for(var i = 0 ; i<liste_intersections.length ; i++)
	 {
	 	inter = liste_intersections[i];
		// Si l'intersection est entre P1 et P2 (vecteur(inter,P1) scalaire vecteur(inter,P2) négatif)
		IP1 = new THREE.Vector3().subVectors(P1,inter)
		IP2 = new THREE.Vector3().subVectors(P2,inter)
		if(IP1.dot(IP2) < 0)
		{
			// On renvoie le point de collision avec un leger retour en arriere (pour ne pas passer à travers au prochain coup)
			return inter.add(IP1.normalize().multiplyScalar(0.0001));
		}
	}
	return null;
}






// *******************************************
// Fonction qui place un marker
// OBSOLETE
/*function placeMarker(P,_couleur_=0x000000)
{
	//Marker en tant que tel
	var geom = new THREE.DodecahedronGeometry(RAYON_MARKER,1);
	var mat = new  THREE.MeshLambertMaterial({
			color: 0x0000ff,
			shading: THREE.SmoothShading
			})
	var sphere = new THREE.Mesh( geom, mat );
	sphere.position.copy(P);
	LISTE_MARKERS.push(sphere)
	MARKERS.add(sphere);
	
	// Coordonnées dans la liste
	$("#liste_mesures").append("\n"+String(Math.round(P.x*1000)/1000)+";"+String(-Math.round(P.z*1000)/1000)+";"+String(Math.round(P.y*1000)/1000))
}*/



// ****************************************
// Fonction qui renvoie true si un marker existe déjà dans les environs
function doublonMarker(pos)
{
	for(var i=0; i<LISTE_MARKERS.length;i++)
	{
		var marker=LISTE_MARKERS[i];
		if(marker.position.distanceTo(pos)<DISTANCE_MIN_MARKERS)
			return true
	}
	return false
}


// **********************************************
// Fonction qui met à jour X (utilisateur)
function updateX(X)
{
	X = Number(X)
	if(X<0)
		X=0;
	if(X>0.8)
		X=0.8;
	POSITION_CIBLE.x = X;
	$("#input_coord_X").val(X)
	$("#input_range_X").val(X)
}
function updateY(Y)
{
	Y = Number(Y)
	if(Y<0)
		Y=0;
	if(Y>0.8)
		Y=0.8;
	POSITION_CIBLE.z = -Y;
	$("#input_coord_Y").val(Y)
	$("#input_range_Y").val(Y)
}
function updateZ(Z)
{
	Z = Number(Z)
	if(Z<0)
		Z=0;
	if(Z>0.4)
		Z=0.4;
	POSITION_CIBLE.y = Z;
	$("#input_coord_Z").val(Z)
	$("#input_range_Z").val(Z)
}


// ************************************
// Fonction qui renvoie les coordonnées dans le repere utilisateur
function X()
{
	return POSITION_CIBLE.x
}
function Y()
{
	return -POSITION_CIBLE.z
}
function Z()
{
	return POSITION_CIBLE.y
}

// *************************************
// Fonction qui met à jour l'affichage des coordonnées
function updateAffichageCoordonnees()
{
	$("#input_coord_X").val(X())
	$("#input_coord_Y").val(Y())
	$("#input_coord_Z").val(Z())
}



// *******************************************************************
// Affiche/Cache la pièce
function afficheCachePiece()
{
	PIECE.visible=!PIECE.visible
	if(PIECE.visible)
	{
		$("#boutonAfficheCachePiece").removeClass("cachePiece");
		$("#boutonAfficheCachePiece").addClass("affichePiece");
	}
	else
	{
		$("#boutonAfficheCachePiece").removeClass("affichePiece");
		$("#boutonAfficheCachePiece").addClass("cachePiece");
	}
}

// **************************************
// Fonction qui affiche/cache la machine
function afficheCacheMachine()
{
	BATI.visible = !BATI.visible
	AXE1.visible = BATI.visible
	AXE2.visible = BATI.visible
	if(BATI.visible)
	{
		$("#boutonAfficheCacheMachine").removeClass("cacheMachine");
		$("#boutonAfficheCacheMachine").addClass("afficheMachine");
	}
	else
	{
		$("#boutonAfficheCacheMachine").removeClass("afficheMachine");
		$("#boutonAfficheCacheMachine").addClass("cacheMachine");
	}
	
}

// **************************************
// Fonction qui affiche/cache la machine
function afficheCacheReperePalpeur()
{
	REPERE_PALPEUR.visible=!REPERE_PALPEUR.visible
	if(REPERE_PALPEUR.visible)
	{
		$("#boutonAfficheCacheReperePalpeur").removeClass("cacheReperePalpeur");
		$("#boutonAfficheCacheReperePalpeur").addClass("afficheReperePalpeur");
	}
	else
	{
		$("#boutonAfficheCacheReperePalpeur").removeClass("afficheReperePalpeur");
		$("#boutonAfficheCacheReperePalpeur").addClass("cacheReperePalpeur");
	}
	
}




// *****************************************
// Fonction qui créer les controlleurs
function creeControllers()
{
	// Controllers
	CONTROLLER1 = RENDERER.xr.getControllerGrip(0);
	var controllerModelFactory = new THREEJS.XRControllerModelFactory();
	var model1 = controllerModelFactory.createControllerModel( CONTROLLER1 );
	CONTROLLER1.add(model1);
	SCENE.add(CONTROLLER1);
	
	
	
	CONTROLLER2 = RENDERER.xr.getControllerGrip(1);
	var model2 = controllerModelFactory.createControllerModel( CONTROLLER2 );
	CONTROLLER2.add(model2);
	SCENE.add(CONTROLLER2);
	
	
	
	// Evenements des mannettes ===
	
	
	CONTROLLER2.addEventListener('selectstart', function(){
					COORDONNEES_INIALES_MANETTE_VR = CONTROLLER2.position.clone() ;  // Position de la manette VR au début du déplacement
					COORDONNEES_PALPEUR_INITIAL_VR = POSITION_CIBLE.clone() ;
					SUIVRE_MANETTE_VR = true;
				});
	CONTROLLER2.addEventListener('selectend', function(){
					SUIVRE_MANETTE_VR = false;
				});
	
	CONTROLLER1.addEventListener('selectstart', function(){
					if(PIECE.visible && BATI.visible)
						PIECE.visible = false;
					else if(BATI.visible)
						afficheCacheMachine()
					else if(PIECE.visible)
						afficheCacheMachine()
					else
						PIECE.visible = true;
						
				});
	CONTROLLER1.addEventListener('selectend', function(){
					
				});
}
// *****************************************
// Redéfinit les paramètres de caméra quand on change la taille de la fenetre
function resizeFenetre()
{
    CAMERA.aspect = (window.innerWidth-300) / window.innerHeight;
    CAMERA.updateProjectionMatrix();
    RENDERER.setSize( window.innerWidth-300, window.innerHeight );
}



// *****************************************
// Ajoute un nouvel item, en accord avec la boite de dialogue
function ajouterItemFromDialog()
{
	// Choix du nouvel item   (type = "nuage" ou "plan", etc.)
	var type=["nuage","plan","cylindre","droite","biplan"][$("#tab_new_item").tabs('option', 'active')];

	if(type == "nuage")
	{
		var methode = ["vierge","fusion"][$("#tab_new_item_nuage_methode").tabs('option', 'active')];
		var nom = $("#tab_new_item_nuage_nom").val();
		var couleur = $("#tab_new_item_nuage_couleur").val();
		var nuage =  ajouteNuage(nom,couleur);
		if(methode == "vierge")
		{
			
		}
		else if (methode == "fusion")
		{
			for(var i=0; i<$("#tab_new_item_liste_assemble_nuage").children().length;i++ ) // Pour chaque nuage à copier
			{
				var htmlNuageAFusionner = $("#tab_new_item_liste_assemble_nuage").children()[i];
				var nNuage = Number($(htmlNuageAFusionner).find(".choix_assemblage_nuage_nuage select").val()); // A quel nuage doit-on s'attacher ?
				var nuageSource = getItemFromId(nNuage)
				
				var A_SUPPRIMER = $(htmlNuageAFusionner).find("input[name=suppr_source]").is(':checked') 
				var A_FUSIONNER = $(htmlNuageAFusionner).find("input[name=CdG]").is(':checked')
				
				if(A_FUSIONNER)
				{
					var CdG = nuageSource.getBarycentre()
					nuage.ajouteMesure(CdG)
				}
				else
				{
					copyMesuresFromFusion(nuageSource,nuage)
				}
				if(A_SUPPRIMER)
				{
					nuageSource.remove()
				}
			}
		}
		return nuage;
	}
	else if(type == "plan")
	{
		var methode = ["equation","contraintes","décalé"][$("#tab_new_item_plan_methode").tabs('option', 'active')];
		var nom = $("#tab_new_item_plan_nom").val();
		var couleur = $("#tab_new_item_nuage_couleur").val();
		
		var centre = new THREE.Vector3(0,0,0); // Centre du plan (qui sera un éventuel barycentre de nuage de points)
		
		if(methode == "equation")
		{
			var A = Number($("#tab_new_item_plan_A").val());
			var B = Number($("#tab_new_item_plan_B").val());
			var C = Number($("#tab_new_item_plan_C").val());
			var D = Number($("#tab_new_item_plan_D").val());
			var plan = new Plan(nom,[ A , C , -B , D ])
		}
		else if(methode == "contraintes")
		{
			var plan = new Plan(nom);
			
			var nbNuages = 0; // Nombre de points (pour le barycentre)
			
			// Ajout des contraintes
			for(var i=0; i<$("#tab_new_item_liste_contraintes_plan").children().length;i++)
			{
				htmlContrainte = $("#tab_new_item_liste_contraintes_plan").children()[i];
				typeContrainte = $(htmlContrainte).find(".type-contrainte").val();
				if(typeContrainte=="RMS")
				{
					var nNuage = Number($(htmlContrainte).find(".choix_contrainte_element select").val()); // A quel nuage doit-on s'attacher ?
					var nuage = getItemFromId(nNuage)	// On recupere le nuage
					centre.add(nuage.getBarycentre())
					nbNuages+=1 // Pour faire la moyenne
					var contrainte = new ContrainteRMSPlan(nuage) // On créer la contrainte
					plan.liste_contraintes.push(contrainte)
				}
				else if(typeContrainte == "exterieurPlus")
				{
					var nNuage = Number($(htmlContrainte).find(".choix_contrainte_element select").val()); // A quel nuage doit-on s'attacher ?
					var nuage = getItemFromId(nNuage)	// On recupere le nuage
					centre.add(nuage.getBarycentre())
					nbNuages+=1 // Pour faire la moyenne
					var contrainte = new ContraintePlanExterieurPositif(nuage) // On créer la contrainte
					plan.liste_contraintes.push(contrainte)
				}
				else if(typeContrainte == "exterieurMoins")
				{
					var nNuage = Number($(htmlContrainte).find(".choix_contrainte_element select").val()); // A quel nuage doit-on s'attacher ?
					var nuage = getItemFromId(nNuage)	// On recupere le nuage
					centre.add(nuage.getBarycentre())
					nbNuages+=1 // Pour faire la moyenne
					var contrainte = new ContraintePlanExterieurNegatif(nuage) // On créer la contrainte
					plan.liste_contraintes.push(contrainte)
				}
				else if(typeContrainte == "parallelisme")
				{
					var nPlanRef = Number($(htmlContrainte).find(".choix_contrainte_element select").val()); // A quel plan doit-on s'attacher ?
					var planRef = getItemFromId(nPlanRef)// On recupere le plan de référence
					var contrainte = new ContraintePlanParallelisme(planRef) // On créer la contrainte
					plan.liste_contraintes.push(contrainte);
				}
				else if(typeContrainte == "perpendicularite")
				{
					var nPlanRef = Number($(htmlContrainte).find(".choix_contrainte_element select").val()); // A quel plan doit-on s'attacher ?
					var planRef = getItemFromId(nPlanRef)// On recupere le plan de référence
					var contrainte = new ContraintePlanPerpendicularite(planRef) // On créer la contrainte
					plan.liste_contraintes.push(contrainte);
				}
			}
			
			if(nbNuages)
				centre.divideScalar(nbNuages)
			plan.optimisePlan(); // si ce n'est pas des contraintes, il ne se passera rien
			
		}
		else if(methode == "décalé")
		{
			var nPlanRef = Number($("#tab_new_item_plan_decale_reference").val()); // A quel plan doit-on s'attacher ?
			var planRef = getItemFromId(nPlanRef)// On recupere le plan de référence
			var decalage = Number($("#tab_new_item_plan_decale_distance").val())
			
			var parametres = planRef.parametres(); // Copie
			
			centre = planRef.centre() // On reprend le même centre, pour être à peu prés en face du plan de référence
			
			
			// On regarde si la normale (a,b,c) du plan est du même sens que OH (H = projection de O sur le plan)
			var O = new THREE.Vector3(0,0,0);
			var OH = planRef.getProjection(O)
			var n = planRef.normale();
			
			if(n.dot(OH)>=0)
				var signe = -1;
			else 
				var signe = 1
			
			parametres[3] += decalage*Math.sqrt(parametres[0]*parametres[0]+parametres[1]*parametres[1]+parametres[2]*parametres[2])*signe;
			console.log(parametres)
			var plan = new Plan(nom,parametres)
		}
		plan.couleur(couleur);
		plan.centre(centre);
		
		LISTE_ITEMS.push(plan);
		$("#arbre").append(plan.getHTML())
		return plan;
		
	}
	else if(type == "cylindre")
	{
		var methode = ["equation","contraintes","droite"][$("#tab_new_item_cylindre_methode").tabs('option', 'active')];
		var nom = $("#tab_new_item_cylindre_nom").val();
		var couleur = $("#tab_new_item_cylindre_couleur").val();
		
		//var centre = new THREE.Vector3(0,0,0); // Centre du plan (qui sera un éventuel barycentre de nuage de points)
		
		
		if(methode == "equation")
		{
			var centre = {"x": Number($("#tab_new_item_cylindre_Px").val()) , "y" : Number($("#tab_new_item_cylindre_Pz").val()) , "z" : -Number($("#tab_new_item_cylindre_Py").val()) };
			var vDirecteur = {"x": Number($("#tab_new_item_cylindre_Vx").val()) , "y" : Number($("#tab_new_item_cylindre_Vz").val()) , "z" : -Number($("#tab_new_item_cylindre_Vy").val()) };
			var R = Number($("#tab_new_item_cylindre_R").val())
			
			var cylindre = new Cylindre(nom,[ centre.x , centre.y , centre.z , vDirecteur.x , vDirecteur.y , vDirecteur.z ,  R])
			
			cylindre.centre(centre); // <-- ? Pourquoi déjà ?
		}
		else if(methode == "contraintes")
		{
			var cylindre = new Cylindre(nom);
			var nbNuages = 0; // Nombre de points (pour le barycentre)
			// Ajout des contraintes
			for(var i=0; i<$("#tab_new_item_liste_contraintes_cylindre").children().length;i++)
			{
				htmlContrainte = $("#tab_new_item_liste_contraintes_cylindre").children()[i];
				typeContrainte = $(htmlContrainte).find(".type-contrainte").val();
				if(typeContrainte=="RMS")
				{
					var nNuage = Number($(htmlContrainte).find(".choix_contrainte_element select").val()); // A quel nuage doit-on s'attacher ?
					var nuage = getItemFromId(nNuage)	// On recupere le nuage
					/*centre.add(nuage.getBarycentre())
					nbNuages+=1 // Pour faire la moyenne*/
					var contrainte = new ContrainteRMSCylindre(nuage) // On créer la contrainte
					cylindre.liste_contraintes.push(contrainte)
				}
				else if(typeContrainte == "inscrit")
				{
					var nNuage = Number($(htmlContrainte).find(".choix_contrainte_element select").val()); // A quel nuage doit-on s'attacher ?
					var nuage = getItemFromId(nNuage)	// On recupere le nuage
					/*centre.add(nuage.getBarycentre())
					nbNuages+=1 // Pour faire la moyenne*/
					var contrainte = new ContrainteCylindreInscrit(nuage) // On créer la contrainte
					cylindre.liste_contraintes.push(contrainte)
				}
				else if(typeContrainte == "circonscrit")
				{
					var nNuage = Number($(htmlContrainte).find(".choix_contrainte_element select").val()); // A quel nuage doit-on s'attacher ?
					var nuage = getItemFromId(nNuage)	// On recupere le nuage
					/*centre.add(nuage.getBarycentre())
					nbNuages+=1 // Pour faire la moyenne*/
					var contrainte = new ContrainteCylindreCirconscrit(nuage) // On créer la contrainte
					cylindre.liste_contraintes.push(contrainte)
				}
				
			}
			
			
			/*if(nbNuages)
				centre.divideScalar(nbNuages)*/
			cylindre.optimiseCylindre(); // Trouves la meilleure équationsi ce n'est pas des contraintes, il ne se passera rien
			cylindre.optimiseGraphismes(); // Trouves les meilleurs paramètres d'affichage (centre, ...)
		}
		else if(methode == "droite")
		{
			var nDroite =  Number($("#tab_new_item_cylindre_droite_choix").val()); 
			var droite = getItemFromId(nDroite);
			var rayon =  Number($("#tab_new_item_cylindre_droite_rayon").val());
			
			var p = droite.parametres();
			var cylindre = new Cylindre(nom,[p[0],p[1],p[2],p[3],p[4],p[5],rayon]);
		}
		
		
		cylindre.couleur(couleur);
		
		LISTE_ITEMS.push(cylindre);
		$("#arbre").append(cylindre.getHTML())
		return cylindre;
		
		
		
		
	}
	else if(type == "droite")
	{
		var methode = ["equation","contraintes","intersection","cylindre"][$("#tab_new_item_droite_methode").tabs('option', 'active')];
		var nom = $("#tab_new_item_droite_nom").val();
		var couleur = $("#tab_new_item_droite_couleur